[{"F:\\google-auto-suggest\\suggest_search_keywords\\src\\App.js":"1"},{"size":1087,"mtime":1611968246567,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1vb0ye2","F:\\google-auto-suggest\\suggest_search_keywords\\src\\App.js",["7"],"import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  var [Sitem, setSitem] = useState(\"\");\n  var [result, setResult] = useState([]);\n  var ChangeHandler = (e) => {\n    setSitem(e.target.value);\n  };\n  useEffect(() => {\n    async function autoSearch() {\n      var res = await axios.get(\n        `http://suggestqueries.google.com/complete/search?client=chrome&q=${Sitem}&hl=en`\n      );\n      var resultArr = res.data[1];\n      if (resultArr.length !== 0) {\n        setResult((result = resultArr));\n      }\n    }\n    autoSearch();\n  }, [Sitem]);\n\n  if (Sitem.length !== 0) {\n    document.getElementById(\"sItem\").style.display = \"flex\";\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"searchBar\">\n        <input\n          type=\"text\"\n          onChange={ChangeHandler}\n          placeholder=\"Search Google\"\n        />\n        <h1 id=\"sItem\" className=\"sItem\">\n          {Sitem}\n        </h1>\n\n        {Sitem.length !== 0 ? result.map((e) => <h1>{e}</h1>) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"8","severity":1,"message":"9","line":18,"column":29,"nodeType":"10","endLine":18,"endColumn":38},"react-hooks/exhaustive-deps","Assignments to the 'result' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Identifier"]